自定义断言工厂
一、创建项目
二、添加依赖
<dependencies>
    <!-- gateway依赖-->
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-gateway</artifactId>
    </dependency>
    <!-- nacos依赖-->
    <dependency>
        <groupId>com.alibaba.cloud</groupId>
        <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
    </dependency>
</dependencies>
三、写配置文件
server:
  port: 8083
spring:
  application:
    name: api-gateway
  cloud: #配置gateway网关
    gateway:
      routes:
        - id: order_route #路由唯一标识
          uri: lb://nacos-order #需要转发的服务（找到对应的消费者的某个接口，消费者自动调用提供者）,lb:使用nacos中的本地负载均衡策略
          #断言设置，用于路由规则匹配
          predicates:
            - Path=/order-serv/** #表示只会匹配请求路径包含order-serv的请求
            - CheckAuth=yuqn #手动设置断言
          filters:
            - StripPrefix=1 #自动去掉上面的order-serv

#配置nacos
    nacos:
      discovery:
        server-addr: localhost:8848
        username: nacos
        password: nacos

# 网关原理
# 上述，用户输入 http://localhost:8083/order-serv/test1  后，
# 通过 predicates 断言，确定该请求包含 order-serv ，进而使用当前id的网关（id: order_route）
# 然后通过网关转到 http://localhost:8081/order-serv/test1  后，
# 通过 filters 去掉 断言关键字 order-serv，最总链路到 http://localhost:8081/test1

四、写自定义断言类
    1、注意类名结尾必须 **PredicateFactory
    2、该类必须继承AbstractRoutePredicateFactory
    3、必须声明静态内部类，声明属性来接受配置对应的断言信息
    4、需要结合shortcutFieldOrder绑定
    5、通过apply进行逻辑判断

package com.yuqn.predicates;

import org.springframework.cloud.gateway.handler.predicate.AbstractRoutePredicateFactory;
import org.springframework.cloud.gateway.handler.predicate.GatewayPredicate;
import org.springframework.stereotype.Component;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.server.ServerWebExchange;

import java.util.Arrays;
import java.util.List;
import java.util.function.Predicate;

@Component
public class CheckAuthRoutePredicateFactory extends AbstractRoutePredicateFactory<CheckAuthRoutePredicateFactory.Config> {


    public CheckAuthRoutePredicateFactory() {
        super(CheckAuthRoutePredicateFactory.Config.class);
    }

    @Override
    public List<String> shortcutFieldOrder() {
        // ==================
        // 这里的值是创建属性的值
        // ==================
        return Arrays.asList("name");
    }

    @Override
    public Predicate<ServerWebExchange> apply(CheckAuthRoutePredicateFactory.Config config) {
        return new GatewayPredicate() {
            @Override
            public boolean test(ServerWebExchange exchange) {
                // ====================
                // 这里添加条件，来确定返回
                // ====================
                if(config.getName().equals("yuqn")){
                    return true;
                }
                return false;
            }
        };
    }

    /**
     * @author: yuqn
     * @Date: 2023/4/29 2:38
     * @description:
     * 接收配置文件中断言属性值
     * @param: null
     * @return: null
     */
    @Validated
    public static class Config {

        // ==================
        // 创建属性接收自定义断言
        // ==================
        private String name;

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }
    }
}

